function options = analysis_options(config_options)

%--Directories
if startsWith(pwd(), '/Volumes')
    options.base_dir = '/Volumes/Seagate Backup Plus Drive/Interaction_Study';
    options.pipeline_dir = '/Users/Jeremy/Google_Drive/Grad_School/Dissertation/Interaction_Study/Preprocessing_Pipeline/'; %this will only work on Jeremy's comp
elseif startsWith(pwd(), '/Users/Jeremy')
    options.base_dir = '/Users/Jeremy/Google_Drive/Grad_School/Dissertation/Interaction_Study/Preprocessing_Pipeline/';
    options.pipeline_dir = options.base_dir;
elseif startsWith(pwd(), '/Users/gutsell')
    options.base_dir = '/Users/gutsell/Documents/data analysis/Interaction Study Analysis/';
    options.pipeline_dir = options.base_dir;
elseif startsWith(pwd(), '/Users/jeremysimon')
    options.base_dir = '/Users/jeremysimon/Google Drive/Grad_School/Dissertation/Interaction_Study/Preprocessing_Pipeline/';
    options.pipeline_dir = options.base_dir;
elseif startsWith(pwd(), 'C:\Users\Benjamin\Desktop\CurrentProjects\EEgPipeline')
    options.base_dir = 'C:\Users\Benjamin\Desktop\CurrentProjects\EEgPipeline\Data';
    options.pipeline_dir = options.base_dir;
else       
    error('Where are we??')
end
addpath(options.base_dir);
addpath(options.pipeline_dir);
cd(options.base_dir);

if startsWith(pwd(), '/Users/gutsell')
    eeglab_folder = fullfile(options.pipeline_dir, 'EEGLAB');
    addpath(eeglab_folder);
    options.CapFolder = fullfile(eeglab_folder, 'plugins/dipfit2.3/standard_BESA\\standard-10-5-cap385.elp');
else
    eeglab_folder = fullfile(options.pipeline_dir, 'eeglab14_1_2b');
    addpath(eeglab_folder);
    options.CapFolder = fullfile(eeglab_folder, 'plugins/dipfit2.3/standard_BESA/standard-10-5-cap385.elp');
end
%and insure EEGLAB is there
if ~exist(eeglab_folder)
    error('Where is your EEGLAB?')
end

options.job_name = config_options.job_name;
options.save_dir = fullfile(options.base_dir, 'Results', options.job_name);
if ~isdir(options.save_dir)
    mkdir(options.save_dir)
end

script_dir = fullfile(options.pipeline_dir, 'script-functions');
helper_dir = fullfile(options.pipeline_dir, 'helper-functions');
options.myRawFilesFolder = fullfile(options.base_dir, 'raw');
options.myIndivFilesFolder = fullfile(options.save_dir, 'Indiv_files');
options.mySplitFilesFolder = fullfile(options.save_dir, 'Split_files');
options.myFilteredFilesFolder = fullfile(options.save_dir, 'Filtered_files');
options.mySegmentsFolder = fullfile(options.save_dir, 'Segmented_files');
options.myPostICAFolder = fullfile(options.save_dir, 'Post-ICA_files');
options.ClumpedTTlsFolder = fullfile(options.save_dir, 'ClumpedTTLs');
options.PostBlinkFolder = fullfile(options.save_dir, 'Post_blinks');
options.DeclumpedFiles = fullfile(options.save_dir, 'Declumped_Files');
options.FinalSegments = fullfile(options.save_dir, 'Final_Segments');
options.power_folder = fullfile(options.save_dir, 'power_files');

addpath(script_dir);
addpath(helper_dir);
addpath(options.myRawFilesFolder);


%--Analysis type
if isfield(config_options, 'analysis_type')
    options.analysis_type = config_options.analysis_type;
else, options.analysis_type = 'Both'; end

%--participants
if isfield(config_options, 'Dyads')
    options.Dyads = config_options.Dyads;
else
    cd(options.myRawFilesFolder);
    %get vhdr names
    p_files = dir('*.vhdr'); 
    p_files = {p_files.name};
    %get just sub #s
    ps = cellfun(@(x) strsplit(x, '.v'), p_files, 'UniformOutput', false);
    %preallocate
    p_nums = cell(1, numel(ps));
    %get just names
    for p_idx = 1:numel(ps)
        p_nums(p_idx) = ps{p_idx}(1);
    end
    %get out of cell
    p_nums = str2double(p_nums);
    %get just dyads
    options.Dyads = p_nums(p_nums < 1000);
end

if isfield(config_options, 'Indivs')
    options.Indivs = config_options.Indivs;
else
    cd(options.myRawFilesFolder);
    %get vhdr names
    p_files = dir('*.vhdr'); 
    p_files = {p_files.name};
    %get just sub #s
    ps = cellfun(@(x) strsplit(x, '.v'), p_files, 'UniformOutput', false);
    %preallocate
    p_nums = cell(1, numel(ps));
    %get just names
    for p_idx = 1:numel(ps)
        p_nums(p_idx) = ps{p_idx}(1);
    end
    %get out of cell
    p_nums = str2double(p_nums);
    %get just indiv
    options.Indivs = p_nums(p_nums > 1000);
end

additional_names = [];
for idx = 1:numel(options.Dyads)
    if mod(options.Dyads(idx), 1) ~= 0 %find .2s
        additional_names = [additional_names round(options.Dyads(idx))];
    end
    options.Dyads = [options.Dyads additional_names];
    options.Dyads = unique(options.Dyads);
end

%--present files
cd(options.myRawFilesFolder);
options.present_files = dir('*.vhdr');
options.present_files = {options.present_files.name};

%--exclusions
if isfield(config_options, 'exclusions')
    options.exclusions = config_options.exclusions;
else, options.exclusions = [2 7 1005 1011 2002 2007 2009 2016 2021:2022]; 
end

%participants with channels to exclude
options.badchans_dyads.subs = [1005 1022 1030 2020 2020 2022 2031 2035 2037];
options.badchans_dyads.chans = {'Fz', 'FC1', 'Fz', 'FP1', 'FP2', 'PO9', 'P4', 'P8', 'P4'};

%--filtering
options.highpass = config_options.highpass;
options.lowpass = config_options.lowpass;
options.laplacian = config_options.laplacian;

%--uV rejection
options.uV_threshold = config_options.uV_threshold;

%--ICA
options.icatype = config_options.icatype;
options.save_img = config_options.save_img;

%--artifact thresholds
options.blink_threshold = config_options.blink_threshold;
options.emg_removal = config_options.emg_removal;
options.emg_threshold = config_options.emg_threshold;
options.other_removal = config_options.other_removal;
options.other_threshold = config_options.other_threshold;
options.brain_threshold = config_options.brain_threshold;

%--spectral decomposition
options.ICA_power = config_options.ICA_power;
options.ica_electrodes = config_options.ica_electrodes;
options.ica_electrode_flag = config_options.ica_electrode_flag;
options.decomp = config_options.decomp;
options.pfreq_low = config_options.pfreq_low; 
options.pfreq_high = config_options.pfreq_high;

%--electrode set-up
if isfield(config_options, 'electrode_template')
    options.electrode_template = config_options.electrode_template;
else, options.electrode_template = ["Fp1", "Fp2", "F7", "F3", "Fz", "F4", "F8", "FC5", "FC1", "FC2", "FC6", ...
        "T7", "C3", "Cz", "C4", "T8", "TP9", "CP5", "CP1", "CP2", "CP6", "TP10", "P7", "P3", ...
        "Pz", "P4", "P8", "PO9", "O1", "Oz", "O2", "PO10", "FCz"]; end
options.n_elec = length(options.electrode_template);

%--markers
%--dyad
dyad_ttls_names = {':_Ice_Breaker', ...
    ':_partner_1s_positive_experience', ...
    ':_partner_1s_negative_experience', ...
    ':_partner_2s_positive_experience', ...
    ':_partner_2s_negative_experience',...
    ':_partner_1s_pre-interaction_ball_squeeze',  ...
    ':_partner_2s_pre-interaction_ball_squeeze', ...
    ':_partner_1s_post-interaction_ball_squeeze', ...
    ':_partner_2s_post-interaction_ball_squeeze', ...
    ':_Action_Coordination_dual'};
dyad_ttls_markers = {'S  1', ...
    'S  3', ...
    'S  4', ...
    'S  6', ...
    'S  7', ...
    'S150', ...
    'S151', ...
    'S152', ...
    'S153', ...
    'S200'};
dyad_ttls_starts = [0 0 0 0 0 0 0 0 0 0];
dyad_ttls_ends = [300 120 120 120 120 30 30 30 30 240];

%--individual
indiv_ttls_names = {':_15_sec_heartbeat', ...
    ':_25_sec_heartbeat', ...
    ':_35_sec_heartbeat', ...
    ':_45_sec_heartbeat', ...
    ':_own_pos_vid', ...
    ':_own_neg_vid', ...
    ':_partner_pos_vid', ...
    ':_partner_neg_vid', ...
    ':_black_hand_1', ...
    ':_black_hand_2', ...
    ':_black_hand_3', ...
    ':_white_hand_1', ...
    ':_white_hand_2', ...
    ':_white_hand_3', ...
    ':_white_noise_black_hand_1', ...
    ':_white_noise_black_hand_2', ...
    ':_white_noise_black_hand_3', ...
    ':_white_noise_white_hand_1', ...
    ':_white_noise_white_hand_2', ...
    ':_white_noise_white_hand_3', ...
    ':_white_noise_ball_roll_1', ...
    ':_white_noise_ball_roll_2', ...
    ':_white_noise_ball_roll_3', ...
    ':_white_noise_ball_roll_4', ...
    ':_white_noise_ball_roll_5', ...
    ':_white_noise_ball_roll_6', ...
    ':_white_noise_ball_roll_7', ...
    ':_white_noise_ball_roll_8', ...
    ':_ball_roll_1', ...
    ':_ball_roll_2', ...
    ':_ball_roll_3', ...
    ':_ball_roll_4', ...
    ':_ball_roll_5', ...
    ':_ball_roll_6', ...
    ':_ball_roll_7', ...
    ':_ball_roll_8', ...
    ':_Action_Coordination_indiv', ...
    ':_eyes_open_baseline', ...
    ':_80s_white_noise_baseline'};
indiv_ttl_markers = {'S 15', ...
    'S 25', ...
    'S 35', ...
    'S 45', ...
    'S 50', ...
    'S 51', ...
    'S 52', ...
    'S 53', ...
    'S101', ...
    'S102', ...
    'S103', ...
    'S104', ...
    'S105', ...
    'S106', ...
    'S111', ...
    'S112', ...
    'S113', ...
    'S114', ...
    'S115', ...
    'S116', ...
    'S117', ...
    'S118', ...
    'S119', ...
    'S120', ...
    'S121', ...
    'S122', ...
    'S123', ...
    'S124', ...
    'S127', ...
    'S128', ...
    'S129', ...
    'S130', ...
    'S131', ...
    'S132', ...
    'S133', ...
    'S134', ...
    'S200', ...
    'S251', ...
    'S252'};
indiv_ttls_starts = [0 0 0 0 0 0 ...
    0 0 0 0 0 0 ...
    0 0 0 0 0 0 ...
    0 0 0 0 0 0 ...
    0 0 0 0 0 0 ...
    0 0 0 0 0 0 ...
    0 0 0];
indiv_ttls_ends = [15 25 35 45 ...
    120 120 120 120 ...
    10 10 10 10 10 10 ...
    2 2 2 2 2 2 ...
    2 2 2 2 2 2 2 2 ...
    2 2 2 2 2 2 2 2 ...
    30 60 80];

%-use just the TTLs you want
if isfield(config_options, 'dyad_ttls')
    if ~isempty(config_options.dyad_ttls.names)
        options.dyad_ttls.names = config_options.dyad_ttls.names;
        dyadttl_idx = ismember(dyad_ttls_names, options.dyad_ttls.names);
        options.dyad_ttls.markers = dyad_ttls_markers(dyadttl_idx);
        options.dyad_ttls.starts = dyad_ttls_starts(dyadttl_idx);
        options.dyad_ttls.ends = dyad_ttls_ends(dyadttl_idx);
    else
        error('\nYou have not selected any dyad ttls\n')
    end
%-default to all TTLs    
else
    options.dyad_ttls.names = dyad_ttls_names;
    options.dyad_ttls.markers = dyad_ttls_markers;
    options.dyad_ttls.starts = dyad_ttls_starts;
    options.dyad_ttls.ends = dyad_ttls_ends;
end
   
if isfield(config_options, 'indiv_ttls')
    if ~isempty(config_options.indiv_ttls.names)
        options.indiv_ttls.names = config_options.indiv_ttls.names;
        indivttl_idx = ismember(indiv_ttls_names, options.indiv_ttls.names);
        options.indiv_ttls.markers = indiv_ttl_markers(indivttl_idx);
        options.indiv_ttls.starts = indiv_ttls_starts(indivttl_idx);
        options.indiv_ttls.ends = indiv_ttls_ends(indivttl_idx);
    else
        error('\nYou have not selected any individual ttls\n')
    end
%-default to all TTLs    
else
    options.indiv_ttls.names = indiv_ttls_names;
    options.indiv_ttls.markers = indiv_ttl_markers;
    options.indiv_ttls.starts = indiv_ttls_starts;
    options.indiv_ttls.ends = indiv_ttls_ends;
end

%-TTLs to combine in ICA
options.BallSqueezeTTLs = {':_partner_1s_pre-interaction_ball_squeeze',  ...
    ':_partner_2s_pre-interaction_ball_squeeze', ...
    ':_partner_1s_post-interaction_ball_squeeze' ...
    ':_partner_2s_post-interaction_ball_squeeze'};
options.HeartbeatTTLs = {':_15_sec_heartbeat', ...
    ':_25_sec_heartbeat', ...
    ':_35_sec_heartbeat', ...
    ':_45_sec_heartbeat'};
options.IndivMuTTLs = {':_black_hand_1', ...
    ':_black_hand_2', ...
    ':_black_hand_3', ...
    ':_white_hand_1', ...
    ':_white_hand_2', ...
    ':_white_hand_3', ...
    ':_white_noise_black_hand_1', ...
    ':_white_noise_black_hand_2', ...
    ':_white_noise_black_hand_3', ...
    ':_white_noise_white_hand_1', ...
    ':_white_noise_white_hand_2', ...
    ':_white_noise_white_hand_3', ...
    ':_white_noise_ball_roll_1', ...
    ':_white_noise_ball_roll_2', ...
    ':_white_noise_ball_roll_3', ...
    ':_white_noise_ball_roll_4', ...
    ':_white_noise_ball_roll_5', ...
    ':_white_noise_ball_roll_6', ...
    ':_white_noise_ball_roll_7', ...
    ':_white_noise_ball_roll_8', ...
    ':_ball_roll_1', ...
    ':_ball_roll_2', ...
    ':_ball_roll_3', ...
    ':_ball_roll_4', ...
    ':_ball_roll_5', ...
    ':_ball_roll_6', ...
    ':_ball_roll_7', ...
    ':_ball_roll_8', ...
    ':_eyes_open_baseline', ...
    ':_80s_white_noise_baseline'};
options.allclumpTTLs = {options.BallSqueezeTTLs{:}, options.HeartbeatTTLs{:}, options.IndivMuTTLs{:}};
options.dyad_ttls_extended = {options.dyad_ttls.names{:}, 'BallSqueezes'};
options.indiv_ttls_extended = {options.indiv_ttls.names{:}, 'Heartbeats', 'MuVideos'};

end







